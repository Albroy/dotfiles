#TODO
function x_oslmd5 {
  openssl rsa -modulus -noout | md5sum;
}


pullgitrep() {
  excluded=("vendor" "node_modules" "dist" "build" "tmp" ".local/share")

  initial_dir=$(pwd)

  find_command="find ~ -type d -name '.git'"

  for term in "${excluded[@]}"; do
    find_command="$find_command ! -path \"*/$term/*\""
  done

  if command -v batcat &>/dev/null; then
    preview_cmd="batcat --style=numbers --color=always 2>/dev/null"
  elif command -v bat &>/dev/null; then
    preview_cmd="bat --style=numbers --color=always 2>/dev/null"
  else
    preview_cmd="cat 2>/dev/null"
  fi  

  repo_dir=$(eval $find_command | fzf --preview "$preview_cmd {}/../README.md" \
    --preview-window=up:30%:wrap \
    --query "$1" \
    --border)

  if [ -z "$repo_dir" ]; then
    echo "No repo selected."
    return 1
  fi

  repo_path=$(dirname "$repo_dir")

  if [ ! -d "$repo_path/.git" ]; then
    echo "Not valid."
    return 1
  fi

  echo "Pulling the latest changes in $repo_path..."
  cd "$repo_path" || return 1
  git pull

  cd "$initial_dir" || return 1
}

diff_tar () {
  if [ "$#" -ne 2 ]; then
    echo "Usage: $0 archive1.tar.gz archive2.tar.gz"
    exit 1
  fi

  local ARCHIVE1="$1"
  local ARCHIVE2="$2"
  local bn1="${ARCHIVE1##*/}"
  bn1="${bn1%.*}"
  local bn2="${ARCHIVE2##*/}"
  bn2="${bn2%.*}"
  local common=$(printf "%s\n%s\n" "$bn1" "$bn2" | awk 'NR==1 {line=$0} NR==2 {for(i=1;i<=length && substr($0, i, 1)==substr(line, i, 1); i++); print substr($0, 1, i-1)}')

  strip_top_folder_if_needed() {
    local dir="$1"
    local entries=("$dir"/*)

    if [ ${#entries[@]} -eq 1 ] && [ -d "${entries[0]}" ]; then
      local subdir="${entries[0]}"
      mv "$subdir"/* "$dir" 2>/dev/null
      rmdir "$subdir"
    fi
  }

  DIR1=$(mktemp -d "/tmp/${bn1}_XXXX")
  DIR2=$(mktemp -d "/tmp/${bn2}_XXXX")


  tar -xzf "$ARCHIVE1" -C "$DIR1"
  tar -xzf "$ARCHIVE2" -C "$DIR2"

  strip_top_folder_if_needed "$DIR1"
  strip_top_folder_if_needed "$DIR2"

  DIFF_FILE=".${bn1}-${bn2}_${EPOCHSECONDS}.diff"

  diff -Naur --no-dereference --exclude=".git" "$DIR1" "$DIR2" > "$DIFF_FILE"
  MODIFIED_FILES=$(grep -E '(^\+\+|^\-\-)' "$DIFF_FILE" | cut -d' ' -f2 | sed 's|.*/||' | awk 'NF' | awk '{print $1}'| sort | uniq -c)
  echo -e "=> Diff $DIFF_FILE,\n${MODIFIED_FILES}"
  dc <<<"1 102*P105P108P101P115P4 8*P100 2+P111P117P110P100P59 1-P32P $(echo -e "${MODIFIED_FILES}" | wc -l) p"
}

dush() { local t="${1:-.}"; [ -f "$t" ] && du -sh "$t" 2>/dev/null || du -sh "$t"/.[^.]* "$t"/* 2>/dev/null | sort -hr; }

ip_to_int() {
    local ip="$1"
    local a b c d
    IFS=. read -r a b c d <<<"$ip"
    echo "$((a * 256 ** 3 + b * 256 ** 2 + c * 256 + d))"
}

int_to_ip() {
    local int="$1"
    local octet1=$((int >> 24 & 255))
    local octet2=$((int >> 16 & 255))
    local octet3=$((int >> 8 & 255))
    local octet4=$((int & 255))
    echo "$octet1.$octet2.$octet3.$octet4"
}

#groups=("192.168.1.0" "192.168.1.1" "192.168.1.2")
#calculate_cidr "${groups[@]}"
calculate_cidr() {
    local group=("$@") 
    local start_ip=${group[0]}  
    local end_ip=${group[-1]}  
    local start_int=$(ip_to_int "$start_ip")
    local end_int=$(ip_to_int "$end_ip") 
    local cidrs=() 
    local diff=$((end_int - start_int + 1)) 
    
    while (( start_int <= end_int )); do
        local remaining=$((end_int - start_int + 1))
        local size=1
        local exp=0
        while (( size << 1 <= remaining )); do
            ((exp++))
            size=$((1 << exp))
        done
        while (( (start_int % size) != 0 )); do
            ((exp--))
            size=$((1 << exp))
        done

        local cidr=$((32 - exp))
        cidrs+=("$(int_to_ip "$start_int")/$cidr")

        start_int=$((start_int + size))
    done  
    echo "${cidrs[@]}"
}

trace_bashrc() {
  temp_file=$(mktemp)

  PS4='+ $(date "+%s.%N")\011' bash -x ~/.bashrc > "$temp_file" 2>&1
  prev_time=0

  while IFS= read -r line; do    
    if [[ "$line" =~ ^(\++)[[:space:]]+([0-9]+)\.([0-9]+) ]]; then
      plus_signs="${BASH_REMATCH[1]}"
      current_time="${BASH_REMATCH[2]}.${BASH_REMATCH[3]}"
      cleaned_line="${line/${BASH_REMATCH[0]}/$plus_signs }"

      if [ "$prev_time" != "0" ]; then
        diff=$(echo "$current_time - $prev_time" | bc)    
        [[ "$diff" =~ ^\. ]] && diff="0$diff"
        echo "$diff | $cleaned_line"
      else
        echo "0.000000000 | $cleaned_line"
      fi
      prev_time="$current_time"
    else
      echo "$line"
    fi
  done < "$temp_file"
  rm "$temp_file"  
}

trace_bashrc_fast() {
  (
    export LC_NUMERIC=C
    LAST=$EPOCHREALTIME
    PS4='+[$(printf "%.3f s" "$(echo "$EPOCHREALTIME - $LAST" | bc)")] '
    set -x
    source ~/.bashrc
    set +x
  ) & 
  wait
}
